This is a script for queue submission of a wrapped script.

Use this program name and ignore that for the wrapped script (it will be
passed on to the batch system).  Arguments for *both* this wrapper script or the
wrapped script are valid (if it is required for the wrapped script, it
is required for the wrapper as well).

*** Batch system submission wrapper:

usage: singleFrameDriver.py [-h] [--queue QUEUE] [--job JOB] [--nodes NODES]
                            [--procs PROCS] [--cores CORES] [--time TIME]
                            [--batch-type {none,None,pbs,slurm,smp}]
                            [--batch-verbose] [--batch-output BATCHOUTPUT]
                            [--batch-submit BATCHSUBMIT]
                            [--batch-options BATCHOPTIONS] [--batch-profile]
                            [--batch-stats] [--dry-run] [--do-exec]
                            [--mpiexec MPIEXEC]

optional arguments:
  -h, --help            show this help message and exit

Batch submission options:
  --queue QUEUE         Queue name
  --job JOB             Job name
  --nodes NODES         Number of nodes
  --procs PROCS         Number of processors per node
  --cores CORES         Number of cores (Slurm/SMP only)
  --time TIME           Expected execution time per element (sec)
  --batch-type {none,None,pbs,slurm,smp}
                        Batch system to use
  --batch-verbose       Enable verbose output in batch script (including
                        system environment information at batch start)?
  --batch-output BATCHOUTPUT
                        Output directory
  --batch-submit BATCHSUBMIT
                        Batch submission command-line flags
  --batch-options BATCHOPTIONS
                        Header options for batch script
  --batch-profile       Enable profiling on batch job?
  --batch-stats         Print process stats on completion (Linux only)?
  --dry-run             Dry run?
  --do-exec             Exec script instead of submit to batch system?
  --mpiexec MPIEXEC     mpiexec options


*** Wrapped script:

usage: singleFrameDriver.py input [options]

positional arguments:
  input                 path to input data repository, relative to
                        $PIPE_INPUT_ROOT

optional arguments:
  --calib RAWCALIB      path to input calibration repository, relative to
                        $PIPE_CALIB_ROOT
  --output RAWOUTPUT    path to output data repository (need not exist),
                        relative to $PIPE_OUTPUT_ROOT
  --rerun [INPUT:]OUTPUT
                        rerun name: sets OUTPUT to ROOT/rerun/OUTPUT;
                        optionally sets ROOT to ROOT/rerun/INPUT
  -c [NAME=VALUE [NAME=VALUE ...]], --config [NAME=VALUE [NAME=VALUE ...]]
                        config override(s), e.g. -c foo=newfoo bar.baz=3
  -C [CONFIGFILE [CONFIGFILE ...]], --configfile [CONFIGFILE [CONFIGFILE ...]]
                        config override file(s)
  -L [LEVEL|COMPONENT=LEVEL [LEVEL|COMPONENT=LEVEL ...]], --loglevel [LEVEL|COMPONENT=LEVEL [LEVEL|COMPONENT=LEVEL ...]]
                        logging level; supported levels are
                        [trace|debug|info|warn|error|fatal]
  --longlog             use a more verbose format for the logging
  --debug               enable debugging output?
  --doraise             raise an exception on error (else log a message and
                        continue)?
  --noExit              Do not exit even upon failure (i.e. return a struct to
                        the calling script)
  --profile PROFILE     Dump cProfile statistics to filename
  --show SHOW [SHOW ...]
                        display the specified information to stdout and quit
                        (unless run is specified).
  -j PROCESSES, --processes PROCESSES
                        Number of processes to use
  -t TIMEOUT, --timeout TIMEOUT
                        Timeout for multiprocessing; maximum wall time (sec)
  --clobber-output      remove and re-create the output directory if it
                        already exists (safe with -j, but not all other forms
                        of parallel execution)
  --clobber-config      backup and then overwrite existing config files
                        instead of checking them (safe with -j, but not all
                        other forms of parallel execution)
  --no-backup-config    Don't copy config to file~N backup.
  --clobber-versions    backup and then overwrite existing package versions
                        instead of checkingthem (safe with -j, but not all
                        other forms of parallel execution)
  --no-versions         don't check package versions; useful for development
  --id [KEY=VALUE1[^VALUE2[^VALUE3...] [KEY=VALUE1[^VALUE2[^VALUE3...] ...]]
                        data ID, e.g. --id visit=12345 ccd=67

Notes:
            * --config, --configfile, --id, --loglevel and @file may appear multiple times;
                all values are used, in order left to right
            * @file reads command-line options from the specified file:
                * data may be distributed among multiple lines (e.g. one option per line)
                * data after # is treated as a comment and ignored
                * blank lines and lines starting with # are ignored
            * To specify multiple values for an option, do not use = after the option name:
                * right: --configfile foo bar
                * wrong: --configfile=foo bar
